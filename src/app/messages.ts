import { translations } from 'locales/translations';
import { _t } from 'utils/messages';

export const messages = {
  connectWallet: () => _t(translations.Header.connect),
  connecting3box: () => _t(translations.connecting3box),
  newPoll: () => _t(translations.Header.newPoll),
  pollList: () => _t(translations.Header.pollList),
  generalInfo: () => _t(translations.CreationPage.CreationForm.generalInfo),
  specifyStartDate: () => _t(translations.CreationPage.CreationForm.specifyStartDate),
  specifyBN: () => _t(translations.CreationPage.CreationForm.specifyBN),
  specifyDate: () => _t(translations.CreationPage.CreationForm.specifyDate),
  specifyLatest: () => _t(translations.CreationPage.CreationForm.specifyLatest),
  titleRule: () => _t(translations.CreationPage.CreationForm.titleRule),
  titlePlaceholder: () => _t(translations.CreationPage.CreationForm.titlePlaceholder),
  descriptionPlaceholder: () => _t(translations.CreationPage.CreationForm.descriptionPlaceholder),
  blockNumberPlaceholder: () => _t(translations.CreationPage.CreationForm.blockNumberPlaceholder),
  datesRule: () => _t(translations.CreationPage.CreationForm.datesRule),
  optionsMinimum: () => _t(translations.CreationPage.CreationForm.optionsMinimum),
  optionsMaximum: () => _t(translations.CreationPage.CreationForm.optionsMaximum),
  optionPlaceholder: () => _t(translations.CreationPage.CreationForm.optionPlaceholder),
  addOption: () => _t(translations.CreationPage.CreationForm.addOption),
  checkboxMultiple: () => _t(translations.CreationPage.CreationForm.checkboxMultiple),
  submit: () => _t(translations.CreationPage.CreationForm.submit),
  options: () => _t(translations.CreationPage.CreationForm.options),
  title: () => _t(translations.CreationPage.title),
  connectWalletToCreate: () => _t(translations.CreationPage.connectWallet),
  endDateRule: () => _t(translations.CreationPage.CreationForm.endDateRule),
  blockNumberRule: () => _t(translations.CreationPage.CreationForm.blockNumberRule),
  pollListTitle: () => _t(translations.PollList.title),
  pollResults: () => _t(translations.PollPage.titleResults),
  pollVote: () => _t(translations.PollPage.titleVote),
  selectAll: () => _t(translations.PollVote.selectAll),
  selectOne: () => _t(translations.PollVote.selectOne),
  notStarted: () => _t(translations.PollVote.notStarted),
  voteRule: () => _t(translations.PollVote.voteRule),
  submitVote: () => _t(translations.PollVote.submitVote),
  connectWalletToVote: () => _t(translations.PollVote.connectWallet),
  voteHeader: () => _t(translations.PollVote.header),
  columnWallet: () => _t(translations.PollResults.columns.wallet),
  columnBalance: () => _t(translations.PollResults.columns.balance),
  columnOptions: () => _t(translations.PollResults.columns.options),
  resultsHeader: () => _t(translations.PollResults.header),
  showVotes: () => _t(translations.PollResults.showVotes),
  hideVotes: () => _t(translations.PollResults.hideVotes),
  totalVotes: () => _t(translations.PollResults.totalVotes),
  notFoundTitle: () => _t(translations.NotFound.title),
  notDescTitle: () => _t(translations.NotFound.desc),
  pollStarts: () => _t(translations.PollHeader.pollStarts),
  endDate: () => _t(translations.PollHeader.endDate),
  blockNumber: () => _t(translations.PollHeader.blockNumber),
  startDate: () => _t(translations.PollHeader.startDate)
};